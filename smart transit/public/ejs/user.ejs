<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bus User Profile</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <!-- Custom CSS -->
   
    <!-- Leaflet CSS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
    <!-- Geoapify CSS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet-geotag-photo/dist/leaflet-geotag-photo.min.css" />
    <style>
        /* Loading Screen Styles */
        #loadingScreen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: #fff url('https://via.placeholder.com/150') no-repeat center;
            z-index: 9999;
        }
        body.loaded #loadingScreen {
            display: none;
        }

        /* Map Styles */
        #map {
            height: 70vh;
            width: 100%;
            margin-top: 50px;
        }
    </style>
</head>
<body>

    <!-- Loading Screen -->
    <div id="loadingScreen"></div>

    <!-- Header Section -->
    <div class="container my-4 text-center" id="header">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <i class="fas fa-chair"></i> Total Seats: 10
            </div>
            <h1 class="fw-bold">
                <i class="fas fa-bus"></i> Smart Transportation System
            </h1>
            <div>
                <i class="fas fa-users"></i> Total Passengers: <%= total_passenger.TOTAL_PASSENGER %>
            </div>
        </div>
    </div>

    <div class="container">
        <!-- Current Traveling Section -->
        <section class="current-travel" id="currentTravel">
            <h2 class="text-primary">Current Traveling</h2>
            <div class="row g-4">
                <div class="col-md-6">
                    <div class="info-item">
                        <i class="fas fa-map-marker-alt text-success"></i>
                        <span>Pick Point: <strong id="currentLocation">Mandatory</strong></span>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="info-item">
                        <i class="fas fa-map-signs text-success"></i>
                        <span>Drop Point: <strong>Null</strong></span>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="info-item">
                        <i class="fas fa-road text-warning"></i>
                        <span>Per KM Cost: <strong>05 Taka</strong></span>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="info-item">
                        <i class="fas fa-calculator text-warning"></i>
                        <span>Current Balance: <strong><%= user_data.BALANCE %>Taka</strong></span>
                    </div>
                </div>
            </div>
        </section>

        <!-- Link to Profile Page -->
        <section class="profile-link mt-5">
            <a href="/user/<%= user_data.USER_ID %>/profile" class="btn btn-primary">Go to Profile</a>
        </section>

     
        <!-- Map Section -->
        <section class="map-section mt-5">
            <h2 class="text-primary text-center">Current Location and Address Display</h2>
            <div id="map"></div>
            <div class="text-center mt-3">
                <div id="savedLocation" class="mb-3"></div>
                <p id="distance"></p>
            </div>
        </section>
    </div>

    <!-- Bootstrap JS and dependencies -->
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.3/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.min.js"></script>
    <!-- Leaflet JS -->
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <!-- Geoapify JS -->
    <script src="https://unpkg.com/leaflet-geotag-photo/dist/leaflet-geotag-photo.min.js"></script>
    <!-- GSAP CDN -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.3/gsap.min.js"></script>
    <!-- Axios CDN -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize the map with a default center
            var map = L.map('map').setView([51.505, -0.09], 13); // Default center view
            var apiKey='7fa23b5a9b194102a9be9a11ce64a57c';
            // Add a tile layer to the map
            L.tileLayer(`https://maps.geoapify.com/v1/tile/osm-bright/{z}/{x}/{y}.png?apiKey=${apiKey}`, {
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            }).addTo(map);

            // Function to send data to the server
            const getdata = async (lat, lng, pick_point) => {
                try {
                    const res = await axios.get(`/user/<%= get_id %>?request=json&lat=${lat}&lng=${lng}&pick_point=${encodeURIComponent(pick_point)}`);
                    console.log(res.data);
                } catch (error) {
                    console.error('Error in Axios GET request:', error);
                }
            }

            // Function to show the current location
            function showCurrentLocation() {
                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(async function (position) {
                        const lat = position.coords.latitude;
                        const lng = position.coords.longitude;

                        // Add marker to the map and center it
                        const marker = L.marker([lat, lng]).addTo(map);
                        map.setView([lat, lng], 13);

                        try {
                            // Reverse Geocoding to get the address
                            const response = await fetch(`https://api.geoapify.com/v1/geocode/reverse?lat=${lat}&lon=${lng}&apiKey=${apiKey}`);
                            const data = await response.json();

                            // Display the current address
                            const address = data.features[0].properties.formatted || `Latitude: ${lat}, Longitude: ${lng}`;
                            document.getElementById('savedLocation').innerText = `Current Address: ${address}`;
                            document.getElementById('currentLocation').innerText = address;

                            // Send location and address to the server
                            await getdata(lat, lng, address);

                        } catch (error) {
                            console.error('Error fetching address:', error);
                            document.getElementById('savedLocation').innerText = `Error retrieving address for Latitude: ${lat}, Longitude: ${lng}`;
                        }

                        // GSAP animation for smooth appearance of the elements
                        gsap.from("#savedLocation", { duration: 1, opacity: 0, y: -50 });

                    }, function (error) {
                        console.error('Geolocation error:', error);
                        alert("Unable to retrieve your location.");
                    });
                } else {
                    alert("Geolocation is not supported by this browser.");
                }
            }

            // Call the function to show current location on page load
            showCurrentLocation();
        });
    </script>

    <!-- GSAP Animation for loading screen -->
    <script>
        window.addEventListener('load', function() {
            document.body.classList.add('loaded');
        });

        gsap.from("#header", { duration: 1, y: -100, opacity: 0 });
        gsap.from("#currentTravel", { duration: 1, x: -100, opacity: 0, delay: 0.5 });
        gsap.from("#historySection", { duration: 1, x: -100, opacity: 0, delay: 2 });
        gsap.from("#map", { duration: 1, scale: 0, opacity: 0, delay: 2.5 });
    </script>
</body>
</html>