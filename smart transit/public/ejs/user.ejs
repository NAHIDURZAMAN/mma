<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bus User Profile</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <!-- Custom CSS -->
    <link rel="stylesheet" href="/smart transit/public/css/user.css">
    <!-- GSAP CDN -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.3/gsap.min.js"></script>
    <!-- Leaflet CSS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <!-- MDB CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/mdb-ui-kit/3.10.2/mdb.min.css" />

    <style>
        /* Loading Screen Styles */
        #loadingScreen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: #fff url('https://via.placeholder.com/150') no-repeat center;
            z-index: 9999;
        }
        body.loaded #loadingScreen {
            display: none;
        }

        /* Map styles */
        #map {
            height: 70vh; /* 70% of the viewport height */
            width: 100%;
        }
    </style>
</head>
<body>

    <!-- Loading Screen -->
    <div id="loadingScreen"></div>

    <!-- Header Section -->
    <div class="container my-4 text-center" id="header">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <i class="fas fa-chair"></i> Total Seats: 40
            </div>
            <h1 class="fw-bold">
                <i class="fas fa-bus"></i> Smart Transportation System
            </h1>
            <div>
                <i class="fas fa-users"></i> Total Passengers: 0
            </div>
        </div>
    </div>

    <div class="container">
        <!-- Current Traveling Section -->
        <!-- [Current Traveling content here] -->

        <!-- Profile Section -->
        <!-- [Profile content here] -->

        <!-- Personal Information Section -->
        <!-- [Personal Information content here] -->

        <!-- History Section with Pagination -->
        <!-- [History content here] -->

        <!-- Map Section for Current Location and Distance -->
        <section class="map-section mt-5" id="mapSection">
            <h2 class="text-primary text-center mb-4">Current Location and Address Display</h2>
            <div id="map" class="mb-4"></div>
            <div class="text-center">
                <div id="savedLocation" class="mb-3"></div>
                <p id="distance"></p>
            </div>
        </section>
    </div>

    <!-- Bootstrap JS and dependencies -->
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.3/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.min.js"></script>
    <!-- Leaflet JS -->
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <!-- Axios JS -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <!-- MDB JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/mdb-ui-kit/3.10.2/mdb.min.js"></script>

    <!-- GSAP Animation Script -->
    <script>
        // Remove loading screen after the page loads
        window.addEventListener('load', function() {
            document.body.classList.add('loaded');
            gsap.from('#header', { duration: 1, opacity: 0, y: -50, ease: 'power2.out' });
            gsap.from('#currentTravel', { duration: 1, opacity: 0, x: -100, ease: 'power2.out', delay: 0.5 });
            gsap.from('#profileSection', { duration: 1, opacity: 0, y: 100, ease: 'power2.out', delay: 1 });
            gsap.from('#personalInfo', { duration: 1, opacity: 0, x: 100, ease: 'power2.out', delay: 1.5 });
            gsap.from('#historySection', { duration: 1, opacity: 0, y: 100, ease: 'power2.out', delay: 2 });
            gsap.from('#mapSection', { duration: 1, opacity: 0, y: 100, ease: 'power2.out', delay: 2.5 });
        });

        // Initialize the map
        const map = L.map('map').setView([0, 0], 13);
        const getdata = async (lat, lng, pick_point) => {
            try {
                const res = await axios.get(`/user/<%= get_id %>?request=json&let=${lat}&lang=${lng}&pick_point=${pick_point}`);
                console.log(res.data);
            } catch (error) {
                console.log('error', error);
            }
        }

        // Add OpenStreetMap tiles
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
        }).addTo(map);

        // Target location coordinates
        const targetLat = 23.822941;
        const targetLng = 90.392630;

        // Function to calculate the distance between two points using Haversine formula
        function calculateDistance(lat1, lon1, lat2, lon2) {
            const R = 6371; // Radius of the Earth in kilometers
            const dLat = (lat2 - lat1) * Math.PI / 180;
            const dLon = (lon2 - lon1) * Math.PI / 180;
            const a = 
                0.5 - Math.cos(dLat)/2 + 
                Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * 
                (1 - Math.cos(dLon))/2;

            return R * 2 * Math.asin(Math.sqrt(a));
        }

        // Function to show current location and address
        function showCurrentLocation() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(async function (position) {
                    const lat = position.coords.latitude;
                    const lng = position.coords.longitude;

                    // Display the current location on the map
                    const marker = L.marker([lat, lng]).addTo(map);
                    map.setView([lat, lng], 13);

                    // Reverse Geocoding to get the address
                    const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${lat}&lon=${lng}`);
                    const data = await response.json();

                    // Display the current address
                    const address = data.display_name || `Latitude: ${lat}, Longitude: ${lng}`;
                    document.getElementById('savedLocation').innerText = `Current Address: ${address}`;

                    // Send location and address to the server
                    getdata(lat, lng, address);

                    // Check if target location is available and calculate the distance
                    if (lat && lng) {
                        const distance = calculateDistance(lat, lng, targetLat, targetLng);
                        document.getElementById('distance').innerText = `Distance to target: ${distance.toFixed(2)} km`;
                    }

                    // GSAP animation for smooth appearance
                    gsap.from("#savedLocation", { duration: 1, opacity: 0, y: -50 });
                    gsap.from("#distance", { duration: 1, opacity: 0, y: -50 });

                });
            } else {
                alert("Geolocation is not supported by this browser.");
            }
        }

        // Call the function to show current location
        showCurrentLocation();
    </script>

</body>
</html>